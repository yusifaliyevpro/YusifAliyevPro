
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ShortenLink` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ShortenLink
 * 
 */
export type ShortenLinkModel = runtime.Types.Result.DefaultSelection<Prisma.$ShortenLinkPayload>

export type AggregateShortenLink = {
  _count: ShortenLinkCountAggregateOutputType | null
  _min: ShortenLinkMinAggregateOutputType | null
  _max: ShortenLinkMaxAggregateOutputType | null
}

export type ShortenLinkMinAggregateOutputType = {
  id: string | null
  slug: string | null
  link: string | null
  createdAt: Date | null
}

export type ShortenLinkMaxAggregateOutputType = {
  id: string | null
  slug: string | null
  link: string | null
  createdAt: Date | null
}

export type ShortenLinkCountAggregateOutputType = {
  id: number
  slug: number
  link: number
  createdAt: number
  _all: number
}


export type ShortenLinkMinAggregateInputType = {
  id?: true
  slug?: true
  link?: true
  createdAt?: true
}

export type ShortenLinkMaxAggregateInputType = {
  id?: true
  slug?: true
  link?: true
  createdAt?: true
}

export type ShortenLinkCountAggregateInputType = {
  id?: true
  slug?: true
  link?: true
  createdAt?: true
  _all?: true
}

export type ShortenLinkAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ShortenLink to aggregate.
   */
  where?: Prisma.ShortenLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShortenLinks to fetch.
   */
  orderBy?: Prisma.ShortenLinkOrderByWithRelationInput | Prisma.ShortenLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ShortenLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShortenLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShortenLinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ShortenLinks
  **/
  _count?: true | ShortenLinkCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ShortenLinkMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ShortenLinkMaxAggregateInputType
}

export type GetShortenLinkAggregateType<T extends ShortenLinkAggregateArgs> = {
      [P in keyof T & keyof AggregateShortenLink]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateShortenLink[P]>
    : Prisma.GetScalarType<T[P], AggregateShortenLink[P]>
}




export type ShortenLinkGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ShortenLinkWhereInput
  orderBy?: Prisma.ShortenLinkOrderByWithAggregationInput | Prisma.ShortenLinkOrderByWithAggregationInput[]
  by: Prisma.ShortenLinkScalarFieldEnum[] | Prisma.ShortenLinkScalarFieldEnum
  having?: Prisma.ShortenLinkScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ShortenLinkCountAggregateInputType | true
  _min?: ShortenLinkMinAggregateInputType
  _max?: ShortenLinkMaxAggregateInputType
}

export type ShortenLinkGroupByOutputType = {
  id: string
  slug: string
  link: string
  createdAt: Date
  _count: ShortenLinkCountAggregateOutputType | null
  _min: ShortenLinkMinAggregateOutputType | null
  _max: ShortenLinkMaxAggregateOutputType | null
}

type GetShortenLinkGroupByPayload<T extends ShortenLinkGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ShortenLinkGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ShortenLinkGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ShortenLinkGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ShortenLinkGroupByOutputType[P]>
      }
    >
  > 



export type ShortenLinkWhereInput = {
  AND?: Prisma.ShortenLinkWhereInput | Prisma.ShortenLinkWhereInput[]
  OR?: Prisma.ShortenLinkWhereInput[]
  NOT?: Prisma.ShortenLinkWhereInput | Prisma.ShortenLinkWhereInput[]
  id?: Prisma.StringFilter<"ShortenLink"> | string
  slug?: Prisma.StringFilter<"ShortenLink"> | string
  link?: Prisma.StringFilter<"ShortenLink"> | string
  createdAt?: Prisma.DateTimeFilter<"ShortenLink"> | Date | string
}

export type ShortenLinkOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  link?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ShortenLinkWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  slug?: string
  AND?: Prisma.ShortenLinkWhereInput | Prisma.ShortenLinkWhereInput[]
  OR?: Prisma.ShortenLinkWhereInput[]
  NOT?: Prisma.ShortenLinkWhereInput | Prisma.ShortenLinkWhereInput[]
  link?: Prisma.StringFilter<"ShortenLink"> | string
  createdAt?: Prisma.DateTimeFilter<"ShortenLink"> | Date | string
}, "id" | "slug">

export type ShortenLinkOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  link?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ShortenLinkCountOrderByAggregateInput
  _max?: Prisma.ShortenLinkMaxOrderByAggregateInput
  _min?: Prisma.ShortenLinkMinOrderByAggregateInput
}

export type ShortenLinkScalarWhereWithAggregatesInput = {
  AND?: Prisma.ShortenLinkScalarWhereWithAggregatesInput | Prisma.ShortenLinkScalarWhereWithAggregatesInput[]
  OR?: Prisma.ShortenLinkScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ShortenLinkScalarWhereWithAggregatesInput | Prisma.ShortenLinkScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ShortenLink"> | string
  slug?: Prisma.StringWithAggregatesFilter<"ShortenLink"> | string
  link?: Prisma.StringWithAggregatesFilter<"ShortenLink"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ShortenLink"> | Date | string
}

export type ShortenLinkCreateInput = {
  id?: string
  slug: string
  link: string
  createdAt?: Date | string
}

export type ShortenLinkUncheckedCreateInput = {
  id?: string
  slug: string
  link: string
  createdAt?: Date | string
}

export type ShortenLinkUpdateInput = {
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShortenLinkUncheckedUpdateInput = {
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShortenLinkCreateManyInput = {
  id?: string
  slug: string
  link: string
  createdAt?: Date | string
}

export type ShortenLinkUpdateManyMutationInput = {
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShortenLinkUncheckedUpdateManyInput = {
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShortenLinkCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  link?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ShortenLinkMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  link?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ShortenLinkMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  link?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}



export type ShortenLinkSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  slug?: boolean
  link?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["shortenLink"]>



export type ShortenLinkSelectScalar = {
  id?: boolean
  slug?: boolean
  link?: boolean
  createdAt?: boolean
}

export type ShortenLinkOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "slug" | "link" | "createdAt", ExtArgs["result"]["shortenLink"]>

export type $ShortenLinkPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ShortenLink"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    slug: string
    link: string
    createdAt: Date
  }, ExtArgs["result"]["shortenLink"]>
  composites: {}
}

export type ShortenLinkGetPayload<S extends boolean | null | undefined | ShortenLinkDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ShortenLinkPayload, S>

export type ShortenLinkCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ShortenLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ShortenLinkCountAggregateInputType | true
  }

export interface ShortenLinkDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShortenLink'], meta: { name: 'ShortenLink' } }
  /**
   * Find zero or one ShortenLink that matches the filter.
   * @param {ShortenLinkFindUniqueArgs} args - Arguments to find a ShortenLink
   * @example
   * // Get one ShortenLink
   * const shortenLink = await prisma.shortenLink.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ShortenLinkFindUniqueArgs>(args: Prisma.SelectSubset<T, ShortenLinkFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ShortenLinkClient<runtime.Types.Result.GetResult<Prisma.$ShortenLinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ShortenLink that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ShortenLinkFindUniqueOrThrowArgs} args - Arguments to find a ShortenLink
   * @example
   * // Get one ShortenLink
   * const shortenLink = await prisma.shortenLink.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ShortenLinkFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ShortenLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShortenLinkClient<runtime.Types.Result.GetResult<Prisma.$ShortenLinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ShortenLink that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortenLinkFindFirstArgs} args - Arguments to find a ShortenLink
   * @example
   * // Get one ShortenLink
   * const shortenLink = await prisma.shortenLink.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ShortenLinkFindFirstArgs>(args?: Prisma.SelectSubset<T, ShortenLinkFindFirstArgs<ExtArgs>>): Prisma.Prisma__ShortenLinkClient<runtime.Types.Result.GetResult<Prisma.$ShortenLinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ShortenLink that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortenLinkFindFirstOrThrowArgs} args - Arguments to find a ShortenLink
   * @example
   * // Get one ShortenLink
   * const shortenLink = await prisma.shortenLink.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ShortenLinkFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ShortenLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShortenLinkClient<runtime.Types.Result.GetResult<Prisma.$ShortenLinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ShortenLinks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortenLinkFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ShortenLinks
   * const shortenLinks = await prisma.shortenLink.findMany()
   * 
   * // Get first 10 ShortenLinks
   * const shortenLinks = await prisma.shortenLink.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const shortenLinkWithIdOnly = await prisma.shortenLink.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ShortenLinkFindManyArgs>(args?: Prisma.SelectSubset<T, ShortenLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShortenLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ShortenLink.
   * @param {ShortenLinkCreateArgs} args - Arguments to create a ShortenLink.
   * @example
   * // Create one ShortenLink
   * const ShortenLink = await prisma.shortenLink.create({
   *   data: {
   *     // ... data to create a ShortenLink
   *   }
   * })
   * 
   */
  create<T extends ShortenLinkCreateArgs>(args: Prisma.SelectSubset<T, ShortenLinkCreateArgs<ExtArgs>>): Prisma.Prisma__ShortenLinkClient<runtime.Types.Result.GetResult<Prisma.$ShortenLinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ShortenLinks.
   * @param {ShortenLinkCreateManyArgs} args - Arguments to create many ShortenLinks.
   * @example
   * // Create many ShortenLinks
   * const shortenLink = await prisma.shortenLink.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ShortenLinkCreateManyArgs>(args?: Prisma.SelectSubset<T, ShortenLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ShortenLink.
   * @param {ShortenLinkDeleteArgs} args - Arguments to delete one ShortenLink.
   * @example
   * // Delete one ShortenLink
   * const ShortenLink = await prisma.shortenLink.delete({
   *   where: {
   *     // ... filter to delete one ShortenLink
   *   }
   * })
   * 
   */
  delete<T extends ShortenLinkDeleteArgs>(args: Prisma.SelectSubset<T, ShortenLinkDeleteArgs<ExtArgs>>): Prisma.Prisma__ShortenLinkClient<runtime.Types.Result.GetResult<Prisma.$ShortenLinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ShortenLink.
   * @param {ShortenLinkUpdateArgs} args - Arguments to update one ShortenLink.
   * @example
   * // Update one ShortenLink
   * const shortenLink = await prisma.shortenLink.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ShortenLinkUpdateArgs>(args: Prisma.SelectSubset<T, ShortenLinkUpdateArgs<ExtArgs>>): Prisma.Prisma__ShortenLinkClient<runtime.Types.Result.GetResult<Prisma.$ShortenLinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ShortenLinks.
   * @param {ShortenLinkDeleteManyArgs} args - Arguments to filter ShortenLinks to delete.
   * @example
   * // Delete a few ShortenLinks
   * const { count } = await prisma.shortenLink.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ShortenLinkDeleteManyArgs>(args?: Prisma.SelectSubset<T, ShortenLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ShortenLinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortenLinkUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ShortenLinks
   * const shortenLink = await prisma.shortenLink.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ShortenLinkUpdateManyArgs>(args: Prisma.SelectSubset<T, ShortenLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ShortenLink.
   * @param {ShortenLinkUpsertArgs} args - Arguments to update or create a ShortenLink.
   * @example
   * // Update or create a ShortenLink
   * const shortenLink = await prisma.shortenLink.upsert({
   *   create: {
   *     // ... data to create a ShortenLink
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ShortenLink we want to update
   *   }
   * })
   */
  upsert<T extends ShortenLinkUpsertArgs>(args: Prisma.SelectSubset<T, ShortenLinkUpsertArgs<ExtArgs>>): Prisma.Prisma__ShortenLinkClient<runtime.Types.Result.GetResult<Prisma.$ShortenLinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ShortenLinks that matches the filter.
   * @param {ShortenLinkFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const shortenLink = await prisma.shortenLink.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.ShortenLinkFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a ShortenLink.
   * @param {ShortenLinkAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const shortenLink = await prisma.shortenLink.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.ShortenLinkAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of ShortenLinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortenLinkCountArgs} args - Arguments to filter ShortenLinks to count.
   * @example
   * // Count the number of ShortenLinks
   * const count = await prisma.shortenLink.count({
   *   where: {
   *     // ... the filter for the ShortenLinks we want to count
   *   }
   * })
  **/
  count<T extends ShortenLinkCountArgs>(
    args?: Prisma.Subset<T, ShortenLinkCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ShortenLinkCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ShortenLink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortenLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ShortenLinkAggregateArgs>(args: Prisma.Subset<T, ShortenLinkAggregateArgs>): Prisma.PrismaPromise<GetShortenLinkAggregateType<T>>

  /**
   * Group by ShortenLink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShortenLinkGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ShortenLinkGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ShortenLinkGroupByArgs['orderBy'] }
      : { orderBy?: ShortenLinkGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ShortenLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShortenLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ShortenLink model
 */
readonly fields: ShortenLinkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ShortenLink.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ShortenLinkClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ShortenLink model
 */
export interface ShortenLinkFieldRefs {
  readonly id: Prisma.FieldRef<"ShortenLink", 'String'>
  readonly slug: Prisma.FieldRef<"ShortenLink", 'String'>
  readonly link: Prisma.FieldRef<"ShortenLink", 'String'>
  readonly createdAt: Prisma.FieldRef<"ShortenLink", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ShortenLink findUnique
 */
export type ShortenLinkFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShortenLink
   */
  select?: Prisma.ShortenLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShortenLink
   */
  omit?: Prisma.ShortenLinkOmit<ExtArgs> | null
  /**
   * Filter, which ShortenLink to fetch.
   */
  where: Prisma.ShortenLinkWhereUniqueInput
}

/**
 * ShortenLink findUniqueOrThrow
 */
export type ShortenLinkFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShortenLink
   */
  select?: Prisma.ShortenLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShortenLink
   */
  omit?: Prisma.ShortenLinkOmit<ExtArgs> | null
  /**
   * Filter, which ShortenLink to fetch.
   */
  where: Prisma.ShortenLinkWhereUniqueInput
}

/**
 * ShortenLink findFirst
 */
export type ShortenLinkFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShortenLink
   */
  select?: Prisma.ShortenLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShortenLink
   */
  omit?: Prisma.ShortenLinkOmit<ExtArgs> | null
  /**
   * Filter, which ShortenLink to fetch.
   */
  where?: Prisma.ShortenLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShortenLinks to fetch.
   */
  orderBy?: Prisma.ShortenLinkOrderByWithRelationInput | Prisma.ShortenLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ShortenLinks.
   */
  cursor?: Prisma.ShortenLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShortenLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShortenLinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ShortenLinks.
   */
  distinct?: Prisma.ShortenLinkScalarFieldEnum | Prisma.ShortenLinkScalarFieldEnum[]
}

/**
 * ShortenLink findFirstOrThrow
 */
export type ShortenLinkFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShortenLink
   */
  select?: Prisma.ShortenLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShortenLink
   */
  omit?: Prisma.ShortenLinkOmit<ExtArgs> | null
  /**
   * Filter, which ShortenLink to fetch.
   */
  where?: Prisma.ShortenLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShortenLinks to fetch.
   */
  orderBy?: Prisma.ShortenLinkOrderByWithRelationInput | Prisma.ShortenLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ShortenLinks.
   */
  cursor?: Prisma.ShortenLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShortenLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShortenLinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ShortenLinks.
   */
  distinct?: Prisma.ShortenLinkScalarFieldEnum | Prisma.ShortenLinkScalarFieldEnum[]
}

/**
 * ShortenLink findMany
 */
export type ShortenLinkFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShortenLink
   */
  select?: Prisma.ShortenLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShortenLink
   */
  omit?: Prisma.ShortenLinkOmit<ExtArgs> | null
  /**
   * Filter, which ShortenLinks to fetch.
   */
  where?: Prisma.ShortenLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShortenLinks to fetch.
   */
  orderBy?: Prisma.ShortenLinkOrderByWithRelationInput | Prisma.ShortenLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ShortenLinks.
   */
  cursor?: Prisma.ShortenLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShortenLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShortenLinks.
   */
  skip?: number
  distinct?: Prisma.ShortenLinkScalarFieldEnum | Prisma.ShortenLinkScalarFieldEnum[]
}

/**
 * ShortenLink create
 */
export type ShortenLinkCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShortenLink
   */
  select?: Prisma.ShortenLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShortenLink
   */
  omit?: Prisma.ShortenLinkOmit<ExtArgs> | null
  /**
   * The data needed to create a ShortenLink.
   */
  data: Prisma.XOR<Prisma.ShortenLinkCreateInput, Prisma.ShortenLinkUncheckedCreateInput>
}

/**
 * ShortenLink createMany
 */
export type ShortenLinkCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ShortenLinks.
   */
  data: Prisma.ShortenLinkCreateManyInput | Prisma.ShortenLinkCreateManyInput[]
}

/**
 * ShortenLink update
 */
export type ShortenLinkUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShortenLink
   */
  select?: Prisma.ShortenLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShortenLink
   */
  omit?: Prisma.ShortenLinkOmit<ExtArgs> | null
  /**
   * The data needed to update a ShortenLink.
   */
  data: Prisma.XOR<Prisma.ShortenLinkUpdateInput, Prisma.ShortenLinkUncheckedUpdateInput>
  /**
   * Choose, which ShortenLink to update.
   */
  where: Prisma.ShortenLinkWhereUniqueInput
}

/**
 * ShortenLink updateMany
 */
export type ShortenLinkUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ShortenLinks.
   */
  data: Prisma.XOR<Prisma.ShortenLinkUpdateManyMutationInput, Prisma.ShortenLinkUncheckedUpdateManyInput>
  /**
   * Filter which ShortenLinks to update
   */
  where?: Prisma.ShortenLinkWhereInput
  /**
   * Limit how many ShortenLinks to update.
   */
  limit?: number
}

/**
 * ShortenLink upsert
 */
export type ShortenLinkUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShortenLink
   */
  select?: Prisma.ShortenLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShortenLink
   */
  omit?: Prisma.ShortenLinkOmit<ExtArgs> | null
  /**
   * The filter to search for the ShortenLink to update in case it exists.
   */
  where: Prisma.ShortenLinkWhereUniqueInput
  /**
   * In case the ShortenLink found by the `where` argument doesn't exist, create a new ShortenLink with this data.
   */
  create: Prisma.XOR<Prisma.ShortenLinkCreateInput, Prisma.ShortenLinkUncheckedCreateInput>
  /**
   * In case the ShortenLink was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ShortenLinkUpdateInput, Prisma.ShortenLinkUncheckedUpdateInput>
}

/**
 * ShortenLink delete
 */
export type ShortenLinkDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShortenLink
   */
  select?: Prisma.ShortenLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShortenLink
   */
  omit?: Prisma.ShortenLinkOmit<ExtArgs> | null
  /**
   * Filter which ShortenLink to delete.
   */
  where: Prisma.ShortenLinkWhereUniqueInput
}

/**
 * ShortenLink deleteMany
 */
export type ShortenLinkDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ShortenLinks to delete
   */
  where?: Prisma.ShortenLinkWhereInput
  /**
   * Limit how many ShortenLinks to delete.
   */
  limit?: number
}

/**
 * ShortenLink findRaw
 */
export type ShortenLinkFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * ShortenLink aggregateRaw
 */
export type ShortenLinkAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * ShortenLink without action
 */
export type ShortenLinkDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShortenLink
   */
  select?: Prisma.ShortenLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShortenLink
   */
  omit?: Prisma.ShortenLinkOmit<ExtArgs> | null
}
